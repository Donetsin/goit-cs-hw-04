Менеджер ресурсів




Вимогливішим до ресурсів, але й зручнішим у використанні є механізм обміну даними між процесами — Менеджер ресурсів.



Менеджер ресурсів (Manager) у Python — це гнучкий інструмент для управління спільними даними між різними процесами. Основною перевагою цього механізму є здатність не тільки працювати локально, а й розширювати діяльність на мережевий рівень, що дозволяє реалізувати розподілені обчислення між комп'ютерами в одній мережі.



Основна перевага — можливість працювати по всій мережі та реалізувати розподілені обчислення між кількома комп'ютерами в одній мережі, реалізація Python-like списків та словників.



Недоліки:



1. Потреба в синхронізації: подібно до інших механізмів багатопроцесорного програмування, менеджер вимагає обережного управління доступом до спільних ресурсів для уникнення конфліктів.



2. Обмеження типів: менеджер підтримує лише певні типи даних, тому для деяких складних або спеціалізованих типів даних він може бути недоступним.



3. Складність API: інтерфейс менеджера може здатися складним для новачків, особливо при роботі з великими та розподіленими системами.



Розглянемо наступний приклад:



from multiprocessing import Process, Manager, current_process
from random import randint
from time import sleep
import logging

logger = logging.getLogger()
stream_handler = logging.StreamHandler()
logger.addHandler(stream_handler)
logger.setLevel(logging.DEBUG)

def worker(delay, val: Manager):
    name = current_process().name
    logger.debug(f'Started: {name}')
    sleep(delay)
    val[name] = current_process().pid
    logger.debug(f'Done: {name}')

if __name__ == '__main__':
    with Manager() as manager:
        m = manager.dict()
        processes = []
        for i in range(5):
            pr = Process(target=worker, args=(randint(1, 3), m))
            pr.start()
            processes.append(pr)

        [pr.join() for pr in processes]
        print(m)



Виведення:



Started: Process-2
Started: Process-3
Started: Process-5
Started: Process-4
Started: Process-6
Done: Process-3
Done: Process-5
Done: Process-2
Done: Process-6
Done: Process-4
{'Process-3': 7444, 'Process-5': 15976, 'Process-2': 15564, 'Process-6': 18896, 'Process-4': 14244}



У цьому прикладі ми запустили п'ять процесів і додали до словника m для кожного процесу його pid — ідентифікатор процесу. Усе це було створено та управлялося менеджером Manager.



Але є важливе зауваження. 
Проксі-об'єкти Manager не можуть поширювати зміни, внесені до об'єктів, що змінюються всередині контейнера. Іншими словами, якщо у вас є об'єкт manager.list(), будь-які зміни в самому керованому списку поширюються на всі інші процеси. 

Але якщо у вас є звичайний список Python всередині цього списку, будь-які зміни у внутрішньому списку не поширюються, тому що менеджер не має можливості виявити зміни.


Щоб поширити зміни, ви також повинні використовувати об'єкти manager.list() для вкладених списків (необхідний Python 3.6 або вище), або вам потрібно безпосередньо змінити об'єкт manager.list() (див. примітку).



Давайте роз'яснимо цей момент та надамо приклад для кращого розуміння.



Проксі-об'єкти в multiprocessing.Manager у Python слугують для безпечного доступу до спільних даних між процесами. Однак, вони мають обмеження: коли ви змінюєте дані всередині складного типу даних (наприклад, список всередині списку), ці зміни не автоматично поширюються на інші процеси. Це відбувається тому, що проксі-об'єкти можуть відстежувати тільки зміни на "верхньому рівні" контейнера, а не вкладені зміни.



from multiprocessing import Manager, Process
import time

def modify_first(shared_list):
    shared_list[0]['key1'] = 'modified by first process'
    print("First Process: Modified the first dictionary")

def modify_third(shared_list):
    shared_list[2]['key3'] = 'modified by third process'
    print("Third Process: Modified the third dictionary")

def read(shared_list):
    # Чекаємо деякий час, щоб зміни були внесені
    time.sleep(2)
    readable_list = [dict(proxy_dict) for proxy_dict in shared_list]
    print(f"Read Process: Read the shared list - {readable_list}")

if __name__ == '__main__':
    with Manager() as manager:
        shared_list = manager.list([
            {'key1': 'original1'},
            {'key2': 'original2'},
            {'key3': 'original3'}
        ])
        p1 = Process(target=modify_first, args=(shared_list,))
        p2 = Process(target=modify_third, args=(shared_list,))
        p3 = Process(target=read, args=(shared_list,))

        p1.start()
        p2.start()
        p3.start()

        p1.join()
        p2.join()
        p3.join()



У цьому прикладі, навіть після зміни елемента вкладеного списку в дочірньому процесі, зміна не відображається в основному процесі. Фактично ми отримали той самий список, що й передавали процесам.



Виведення:



First Process: Modified the first dictionary
Third Process: Modified the third dictionary
Read Process: Read the shared list - [{'key1': 'original1'}, {'key2': 'original2'}, {'key3': 'original3'}]



Щоб вирішити цю проблему, можна використовувати структури даних менеджера для кожного рівня вкладеності або вносити зміни безпосередньо в проксі-об'єкти. Нам треба використовувати manager.dict() для кожного вкладеного словника, що дозволяє коректно поширювати зміни між процесами.



from multiprocessing import Manager, Process
import time

def modify_first(shared_list):
    shared_list[0]['key1'] = 'modified by first process'
    print("First Process: Modified the first dictionary")

def modify_third(shared_list):
    shared_list[2]['key3'] = 'modified by third process'
    print("Third Process: Modified the third dictionary")

def read(shared_list):
    # Чекаємо деякий час, щоб зміни були внесені
    time.sleep(2)
    readable_list = [dict(proxy_dict) for proxy_dict in shared_list]
    print(f"Read Process: Read the shared list - {readable_list}")

if __name__ == '__main__':
    with Manager() as manager:
        shared_list = manager.list([
            manager.dict({'key1': 'original1'}),
            manager.dict({'key2': 'original2'}),
            manager.dict({'key3': 'original3'})
        ])
        p1 = Process(target=modify_first, args=(shared_list,))
        p2 = Process(target=modify_third, args=(shared_list,))
        p3 = Process(target=read, args=(shared_list,))

        p1.start()
        p2.start()
        p3.start()

        p1.join()
        p2.join()
        p3.join()



Виведення:



First Process: Modified the first dictionary
Third Process: Modified the third dictionary
Read Process: Read the shared list - [{'key1': 'modified by first process'}, {'key2': 'original2'}, {'key3': 'modified by third process'}]



Тепер процес modify_first змінює словник на першій позиції у спільному списку. Процес modify_third змінює словник на третій позиції у спільному списку.



Після внесення змін обома процесами, третій процес read читає весь список, щоб показати внесені зміни. І ми бачимо ці зміни.

