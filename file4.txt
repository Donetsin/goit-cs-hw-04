Pipe (канал)



Механізм каналів у Python є потужним інструментом для спілкування між процесами, який реалізований на основі сокетів. Він доступний на всіх POSIX-сумісних системах (таких як Linux, macOS, FreeBSD, Unix) і пропонує гнучкий спосіб обміну даними між процесами.



Є декілька основних властивостей каналів:



- Канал утворюється як пара об'єктів, що представляють два кінці з'єднання. Це дозволяє асинхронно обмінюватися повідомленнями між процесами — один процес може надсилати дані через канал, а інший — отримувати.



- Повідомлення, відправлені через канал, зберігають свій порядок. Це означає, що повідомлення, відправлені першими, будуть отримані першими.



- Один і той самий кінець каналу не може використовуватися в декількох процесах одночасно.





Клас Pipe  модуля multiprocessing повертає парний кортеж (conn1, conn2), що складається з об'єктів Connection, які представляють кінці одного каналу.



Клас Pipe приймає аргумент дуплекс duplex, який за замовчуванням дорівнює True. Тоді канал є двоспрямованим, якщо ж duplex=False, тоді канал є односпрямованим і conn1 використовується для приймання повідомлень, а conn2 — для надсилання повідомлень.



Об'єкти conn1 і conn2 мають ряд методів, основні — це:

send — відправляє об'єкт на інший кінець з'єднання
recv — повертає об'єкт, відправлений з іншого кінця з'єднання
close — закриває з'єднання


Давайте розглянемо приклад реалізації каналу в Python за допомогою класу Pipe.



from multiprocessing import Pipe, Process, current_process
from time import sleep
import sys
import logging

logger = logging.getLogger()
stream_handler = logging.StreamHandler()
logger.addHandler(stream_handler)
logger.setLevel(logging.DEBUG)

recipient1, sender1 = Pipe()
recipient2, sender2 = Pipe()

def worker(pipe: Pipe):
    name = current_process().name
    logger.debug(f'{name} started...')
    val = pipe.recv()
    logger.debug(val**2)
    sys.exit(0)

if __name__ == '__main__':
    w1 = Process(target=worker, args=(recipient1, ))
    w2 = Process(target=worker, args=(recipient2, ))

    w1.start()
    w2.start()

    sender1.send(8)
    sleep(1)
    sender2.send(16)





У цьому прикладі ми пишемо в канали з батьківського процесу sender1.send(8) і sender2.send(16), а читаємо з дочірніх pipe.recv() всередині функції worker.



Виведення:



Process-1 started...
64
Process-2 started...
256



Інформація засвоюється якісніше, коли ми намагаємося щось зробити самостійно, ніж тоді, коли ми лише дивимось, як це робить хтось інший. 

Тому для кращого розуміння під час читання матеріалів виконуйте всі зазначені дії паралельно — це допоможе вам краще засвоїти матеріал та підготуватись до заняття з викладачем.


У канал можна відправити будь-який тип даних, який можна перетворити на byte-рядок за допомогою pickle. Не можна надсилати функції або інші об'єкти, які не серіалізуються. Методи send і recv можуть блокуватися, якщо інший кінець каналу не відправляє або не отримує дані відповідно.



Канали є ефективним механізмом для спілкування між процесами у Python та є особливо корисними у ситуаціях, де необхідно асинхронно обмінюватися даними між окремими процесами.